## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   Installs matchbox
##   Constructs configuration file fragments in /etc/matchbox/cfg-fragments/*
##   Assembles fragments to /etc/matchbox/*
##   Enables system services
##   Enables firewall services and ports
##

---
- hosts: myBastion
  tasks:



  - name: "ocp4-workshop : bastion-matchbox : determine bastion pub IP"
    set_fact: 
      f_bastionName:   "{{ hostvars[item]['inventory_hostname_short']}}"
      f_bastionIP:     "{{ hostvars[item]['h_pubIP'] }}"
      f_bastionFQDN:   "{{ hostvars[item]['h_pubIP'] }}.{{ g_pubFQDN }}"
    loop: "{{ groups['myBastion'] }}"



  - name: "ocp4-workshop : bastion-matchbox : stat software"
    stat: 
      path: "/usr/local/src/{{ matchbox_assets[g_clusterVersion]['filename'] }}"
    register: test_matchbox_src

  - name: "ocp4-workshop : bastion-matchbox : software download"
    environment:
      http_proxy:  "{{ g_http_proxy }}"
      https_proxy: "{{ g_https_proxy }}"
    get_url:
      url:  "{{ matchbox_assets[g_clusterVersion]['url'] }}/{{ matchbox_assets[g_clusterVersion]['filename'] }}"
      dest: "/usr/local/src/{{ matchbox_assets[g_clusterVersion]['filename'] }}"
      mode: "0644"
      timeout: 60
    when: test_matchbox_src.stat.exists == false
    register: matchbox_download
    until: matchbox_download is not failed
    retries: 5



  - name: "ocp4-workshop : bastion-matchbox : unpack software"
    shell:
      cmd: |
        cd /usr/local/src
        tar zxvf {{ matchbox_assets[g_clusterVersion]['filename'] }}



  - name: "ocp4-workshop : bastion-matchbox : create self signed certs"
    environment:
      SAN: "DNS.1:{{ f_bastionName }}.{{ f_bastionFQDN }},IP.1:{{ f_bastionIP }}"
    shell:
      cmd: |
        cd "/usr/local/src/{{ matchbox_assets[g_clusterVersion]['destdir'] }}/scripts/tls"
        ./cert-gen



  - name: "ocp4-workshop : bastion-matchbox : create matchbox group"
    group:
      name: "matchbox"
      state: present
      system: yes
      password: "*"


    
  - name: "ocp4-workshop : bastion-matchbox : create matchbox user"
    user:
      name: "matchbox"
      state: present
      system: yes
      password: "*"
      group: "matchbox"



  - name: "ocp4-workshop : bastion-matchbox : clean prior cfg directories"
    shell:
      cmd: |
        if [[ -d "{{ item }}" ]] ; then rm -rf "{{ item }}" ; fi
    with_items:
      - "/var/lib/matchbox/groups"
      - "/var/lib/matchbox/profiles"



  - name: "ocp4-workshop : bastion-matchbox  create directories"
    file:
      path: "{{ item }}"
      state: directory
      owner: matchbox
      group: matchbox
      mode: "0755"
    with_items:
      - "/etc/matchbox"
      - "/etc/matchbox/ssl"
      - "/var/lib/matchbox/assets"
      - "/var/lib/matchbox/groups"
      - "/var/lib/matchbox/profiles"
      - "/var/lib/matchbox/ignition"



  - name: "ocp4-workshop : bastion-matchbox : install matchbox binary"
    copy:
      src:   "/usr/local/src/{{ matchbox_assets[g_clusterVersion]['destdir'] }}/matchbox"
      dest:  "/usr/local/bin"
      mode:  "0555"
      owner: "matchbox"
      group: "matchbox"
      remote_src: yes



  - name: "ocp4-workshop : bastion-matchbox : install matchbox self-signed certs"
    copy:
      src:   "/usr/local/src/{{ matchbox_assets[g_clusterVersion]['destdir'] }}/scripts/tls/{{ item }}"
      dest:  "/etc/matchbox/ssl"
      mode:  "0644"
      owner: "matchbox"
      group: "matchbox"
      remote_src: yes
    with_items:
      - "server.crt"
      - "server.key"



  ##
  ## ** NOTE **
  ##
  ##       'rootfs' and 'bios4k' was introduced in ocp-4.6 and previous releases won't have that asset defined
  ##       so I am including some logic to maintain backwards compatability for a while.  hence
  ##       the default ({}) empty set if rootfs or bios4k are undefined
  ##



  - name: "ocp4-workshop : bastion-matchbox : Red Hat CoreOS image stats"
    stat:
      path: "/var/lib/matchbox/assets/{{ item }}"
    with_items:
      - "{{ rhcos_assets[g_clusterVersion]['initramfs'] }}"
      - "{{ rhcos_assets[g_clusterVersion]['kernel']    }}"
      - "{{ rhcos_assets[g_clusterVersion]['bios']      }}"
      - "{{ rhcos_assets[g_clusterVersion]['iso']       }}"
      - "{{ rhcos_assets[g_clusterVersion]['rootfs'] | default([]) }}"
      - "{{ rhcos_assets[g_clusterVersion]['bios4k'] | default([]) }}"
    register: asset_stats

  - name: "ocp4-workshop : bastion-matchbox : Red Hat CoreOS image download"
    environment:
      http_proxy: "{{ g_http_proxy }}"
      https_proxy: "{{ g_https_proxy }}"
    get_url:
      url: "{{ rhcos_assets[g_clusterVersion]['url'] }}/{{ item }}"
      dest: "/var/lib/matchbox/assets/{{ item }}"
      owner: matchbox
      group: matchbox
      mode: "0644"
      timeout: 60
      force: no
    loop: "{{ asset_stats.results | rejectattr('stat.exists') | map(attribute='item') | list }}"
    register: coreos_download
    until: coreos_download is not failed
    retries: 5



  - name: "ocp4-workshop : bastion-matchbox : deploy bootstrap group-configs"
    vars:
      - p_profile:  "bootstrap"
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-group.j2"
      dest:  "/var/lib/matchbox/groups/{{ p_profile }}-{{ p_name }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myBootstrap'] }}"



  - name: "ocp4-workshop : bastion-matchbox : deploy master group-configs"
    vars:
      - p_profile:  "master"
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-group.j2"
      dest:  "/var/lib/matchbox/groups/{{ p_profile }}-{{ p_name }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myMasters'] }}"



  - name: "ocp4-workshop : bastion-matchbox : deploy worker group-configs"
    vars:
      - p_profile:  "worker"
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
    template:
      src:   "matchbox-group.j2"
      dest:  "/var/lib/matchbox/groups/{{ p_profile }}-{{ p_name }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myWorkers'] }}"



  - name: "ocp4-workshop : bastion-matchbox : deploy bootstrap profiles"
    vars:
      - p_profile:  "bootstrap"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ f_bastionIP }}"
      - p_port:     "{{ matchbox.port }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda')  }}"
      - p_network:  "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
      - p_usbdelay: "{{ hostvars[item]['h_rhcosUSBdelay'] | default ('0') }}"
      - p_loader:   "{{ hostvars[item]['h_rhcosLOADER']   | default ('bios') }}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
    template:
      src:   "matchbox-profile.j2"
      dest:  "/var/lib/matchbox/profiles/{{ p_profile }}-{{ item }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myBootstrap'] }}"



  - name: "ocp4-workshop : bastion-matchbox : deploy master profiles"
    vars:
      - p_profile:  "master"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ f_bastionIP }}"
      - p_port:     "{{ matchbox.port }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
      - p_usbdelay: "{{ hostvars[item]['h_rhcosUSBdelay'] | default ('0') }}"
      - p_loader:   "{{ hostvars[item]['h_rhcosLOADER']   | default ('bios') }}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
    template:
      src:   "matchbox-profile.j2"
      dest:  "/var/lib/matchbox/profiles/{{ p_profile }}-{{ item }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myMasters'] }}"



  - name: "ocp4-workshop : bastion-matchbox : deploy worker profiles"
    vars:
      - p_profile:  "worker"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ f_bastionIP }}"
      - p_port:     "{{ matchbox.port }}"
      - p_hw:       "{{ hostvars[item]['h_hwPROF'] }}"
      - p_storage:  "{{ hostvars[item]['h_rhcosDEV'] | default ('sda') }}"
      - p_network:  "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
      - p_usbdelay: "{{ hostvars[item]['h_rhcosUSBdelay'] | default ('0') }}"
      - p_loader:   "{{ hostvars[item]['h_rhcosLOADER']   | default ('bios') }}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
    template:
      src:   "matchbox-profile.j2"
      dest:  "/var/lib/matchbox/profiles/{{ p_profile }}-{{ item }}.json"
      mode:  "644"
      owner: matchbox
      group: matchbox
    loop: "{{ groups['myWorkers'] }}"



  - name: "ocp4-workshop : bastion-matchbox : SELinux restore contexts on doc-root"
    shell: restorecon -R /var/lib/matchbox 



  - name: "ocp4-workshop : bastion-matchbox : deploy systemd config"
    vars:
      - p_port: "{{ matchbox.port }}"
    template:
      src:   "matchbox-systemd.j2"
      dest:  "/etc/systemd/system/matchbox.service"
      mode:  "644"
      owner: root
      group: root



  # Use service_facts module to collect systemd info
  # We can then sanely test existence of units
  # Here are some sample debugs as well
  #   
  #  - debug:
  #      var: ansible_facts.services
  #      var: ansible_facts.services["httpd.service"]

  - name: "ocp4-workshop : bastion-matchbox : populate system service facts"
    service_facts:
  
  - name: "ocp4-workshop : bastion-matchbox : stop, disable and mask possible conflicting service (httpd)"
    service: name="httpd" state=stopped enabled=no masked=yes daemon_reload=yes
    when: ansible_facts.services["httpd.service"] is defined

  - name: "ocp4-workshop : bastion-matchbox : stop, disable and mask possible conflicting service (nginx)"
    service: name="nginx" state=stopped enabled=no masked=yes daemon_reload=yes
    when: ansible_facts.services["nginx.service"] is defined

  - name: "ocp4-workshop : bastion-matchbox : enable and restart services"
    service: name="{{ item }}" state=restarted enabled=yes masked=no daemon_reload=yes
    with_items:
      - "matchbox"

  - name: "ocp4-workshop : bastion-matchbox : add firewalld ports and services"
    firewalld:
      port: "{{ item }}"
      immediate: yes
      permanent: yes
      state: enabled
    with_items:
      - "{{ matchbox.port }}/tcp"
      - "{{ matchbox.port }}/udp"

