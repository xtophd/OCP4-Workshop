## Authors: 
##    Christoph Doerbeck
##
## Summary:
##

---
- hosts: myBastion
  tasks:


  ##
  ##    Create a list of hosts in the cluster
  ##



  - set_fact: cluster_hosts="{{ [ groups['myBastion'], groups['myMasters'], groups['myWorkers'], groups['myBootstrap'] ] | flatten(1) }}"


  ##
  ##    Install needed packags
  ##



  - name: "ocp4-workshop : bastion-dns : package installation"
    yum: name=dnsmasq state=installed



  ##
  ##    NOTE: This project does NOT play nice with other projects
  ##          that monkey with dnsmasq configs.  Bastion host
  ##          should be a dedicated system for openshift.
  ##    
  ##    Cleanup any previous dnsmasq configs, IPs and hostnames   
  ##    



  - name: "ocp4-workshop : bastion-dns : clean cfg directory"
    shell:
      cmd: |
        if [[ -d "/etc/dnsmasq.d" ]] ; then rm -rf /etc/dnsmasq.d/* ; fi

  - name: "ocp4-workshop : bastion-dns : cleanup conflicting IPs in /etc/hosts"
    lineinfile:
      dest:   "/etc/hosts"
      regexp: "{{ hostvars[item]['h_pubIP'] }} .*$"
      state:  absent
    loop: "{{ cluster_hosts }}"

  - name: "ocp4-workshop : bastion-dns : cleanup conflicting names in /etc/hosts"
    lineinfile:
      dest:   "/etc/hosts"
      regexp: ".*{{ item }}.{{ g_pubFQDN }}.*"
      state:  absent
    loop: "{{ cluster_hosts }}"



  ##
  ##    Create config entries dnsmasq using templates
  ##



  - name: "ocp4-workshop : bastion-dns : deploy STANDARD options"
    vars: 
      - p_nameServer:  "{{ g_pubDNS }}"
    template:
      src: "dnsmasq-standard-opts.j2"
      dest: "/etc/dnsmasq.d/30-standard-opts.conf"
      owner: root

  - name: "ocp4-workshop : bastion-dns : deploy HOST entries"
    vars: 
      - p_item:     "{{ item }}"
      - p_name:     "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:     "{{ hostvars[item]['h_pubIP'] }}"
      - p_mac:      "{{ hostvars[item]['h_pubMAC'] }}"
      - p_etcdName: "{{ hostvars[item]['h_etcdName'] | default('') }}"
      - p_revAddr:  "{{ (p_addr.split('.'))[::-1]|join('.') }}"
      - p_netmask:  "{{ g_pubNM }}"
      - p_gateway:  "{{ g_pubGW'] }}"
      - p_domain:   "{{ g_clusterName }}.{{ g_publicDomain }}"
    when: g_publicNet == true
    template:
      src: "dnsmasq-host-entry.j2"
      dest: "/etc/dnsmasq.d/50-dns-{{ p_domain }}-{{ p_name }}.conf"
      owner: root
      group: root
      mode: 644
    loop: "{{ cluster_hosts }}"

  - name: "ocp4-workshop : bastion-dns : deploy ETCD entries"
    vars: 
      - p_item:      "{{ item }}"
      - p_name:      "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_etcdName:  "{{ hostvars[item]['h_etcdName'] | default('') }}"
      - p_domain:    "{{ g_clusterName }}.{{ g_publicDomain }}"
      - p_clusterName: "{{ g_clusterName }}"
    when:
      - p_etcdName != ""
    template:
      src: "dnsmasq-etcd-entry.j2"
      dest: "/etc/dnsmasq.d/45-etcd-{{ p_etcdName }}.conf"
      owner: root
      group: root
      mode: 644
    loop: "{{ cluster_hosts }}"

  - name: "ocp4-workshop : bastion-dns : deploy API config"
    vars: 
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_domain:    "{{ g_clusterName }}.{{ g_publicDomain }}"
      - p_revAddr:   "{{ (p_addr.split('.'))[::-1]|join('.') }}"
    when:
      - g_useDNS == true
    template:
      src: "dnsmasq-api-entry.j2"
      dest: "/etc/dnsmasq.d/55-api-{{ g_clusterName }}.conf"
      owner: root
    loop: "{{ groups['myBastion'] }}"

  - name: "ocp4-workshop : bastion-dns : deploy PUBLIC wildcard"
    vars: 
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_domain:    "{{ g_wildcardName }}.{{ g_clusterName }}.{{ g_publicDomain }}"
    when:
      - g_useDNSwildcard == true
    template:
      src: "dnsmasq-wildcard-entry.j2"
      dest: "/etc/dnsmasq.d/45-wildcard-{{ g_clusterName }}.conf"
      owner: root
    loop: "{{ groups['myBastion'] }}"



  ##
  ##    Put a friendly note in /etc/hosts to 
  ##    inform people that the config parameters
  ##    are in /etc/dnsmasq.d
  ##



  - name: "ocp4-workshop : bastion-dns : add comment to /etc/hosts"
    blockinfile:
      dest:   "/etc/hosts"
      insertbefore: BOF
      block: |
        ##
        ## NOTE - dns entries for the OCP cluster are in /etc/dnsmasq.d/
        ## NOTE - this includes PTR, CNAME, SVR and WILDCARDS
        ## NOTE - resolv.conf should point to localhost 127.0.0.1
        ##
      state:  present



  ##
  ##    We need to disable networkmanager 
  ##    from toying with /etc/resolv.conf
  ##



  - name: "ocp4-workshop : bastion-dns : disable network-manager /etc/resolv.conf adjustments"
    template:
      src:   "dns-resolv-fix.j2"
      dest:  "/etc/NetworkManager/conf.d/90-dns-none.conf"
      owner: root

  - name: "ocp4-workshop : bastion-dns : restart networkmanager service"
    service: name=NetworkManager state=reloaded enabled=yes



  ##
  ##    Now deploy a /etc/resolv.conf that 
  ##    points to our bastion dns server
  ##



  - name: "ocp4-workshop : bastion-dns : template deploy resolv.conf to point to localhost"
    vars: 
      - p_search:     "{{ g_clusterName }}.{{ g_publicDomain }}"
      - p_nameserver: "127.0.0.1"
    template:
      src:   "dns-resolv-conf.j2"
      dest:  "/etc/resolv.conf"
      owner: root



  ##
  ##    Last couple of items:
  ##      firewall rules
  ##      systemd overrides
  ##      service restart
  ##



  - name: "ocp4-workshop : bastion-dns : add firewalld service rules"
    firewalld:
      service: dns
      immediate: yes
      permanent: yes
      state: enabled

  - name: "ocp4-workshop : bastion-dns : create systemd override directory"
    file:
      path: /etc/systemd/system/dnsmasq.service.d
      mode: "0755"
      state: directory

  - name: "ocp4-workshop : bastion-dns : set systemd overrides"
    template:
      src: "dnsmasq-systemd-overrides.j2"
      dest: "/etc/systemd/system/dnsmasq.service.d/overrides.conf"
      owner: root
      group: root
      mode: 644

  - name: "ocp4-workshop : bastion-dns : restart service"
    service: name=dnsmasq state=restarted enabled=yes daemon_reload=yes

