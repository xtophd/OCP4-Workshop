## Authors: 
##   Christoph Doerbeck
##
## Summary:
##   This playbook configures ISOs to support UEFI HTTP installations of RHCOS
##   
##   Current dhcp model should follow:
##
##   (A) If class is UEFI
##         If iUEFI based, we boot from matchbox 
##         If UEFI based, we chain load with ipxe.efi and try again as iUEFI
##         If  UEFI based, we chain load with undionly and try again as iUEFI
##
##   (B) If class is HTTP
##         Send URL to customized ISO
##
##   This playbook is focused on "setting up" (B)
##   This playbook must run after  bastion-matchbox
##   This playbook must run before bastion-dhcp
##

---
- hosts: myBastion
  tasks:
  
  - name: "ocp4-workshop : bastion-iso : package installation"
    yum: name=genisoimage,xorriso state=installed

  - name: "ocp4-workshop : bastion-iso : clean-up iso directory /var/tmp/{{ workshop_vars.clustername }}/iso"
    shell:
      cmd: |
        if [[ -d "/var/tmp/{{ workshop_vars.clustername }}/iso" ]] ; then rm -rf /var/tmp/{{ workshop_vars.clustername }}/iso ; fi

  - name: "ocp4-workshop : bastion-iso : create fresh iso work directory for each host"
    file: 
      path="/var/tmp/{{ workshop_vars.clustername }}/iso/{{ item }}" 
      mode="0755" 
      state=directory
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}" 

  - name: "ocp4-workshop : bastion-iso : clone ISO source to temp workspace"
    vars:
      t_isofile:  "/var/lib/matchbox/assets/{{ rhcos_assets[workshop_vars.ocp_version]['iso'] }}"
      t_destdir: "/var/tmp/{{ workshop_vars.clustername }}/iso/{{ item }}"
    shell:
      cmd: |
        xorriso -osirrox on -indev "{{ t_isofile }}" -extract / "{{ t_destdir }}"
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

  - name: "ocp4-workshop : bastion-iso : determine bastion pub IP"
    set_fact:
      f_bastionName: "{{ hostvars[item]['inventory_hostname_short']}}"
      f_bastionIP:   "{{ hostvars[item]['h_pubIP'] }}"
    loop: "{{ groups['myBastion'] }}"



  ##
  ##    NOTE:  because I am using http (not https), I need to add
  ##           "coreos.inst.insecure=yes" to my list of kernel options
  ##



  - name: "ocp4-workshop : bastion-iso : customize isolinux configs"
    vars:
      - p_name:      "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_mac:       "{{ hostvars[item]['h_pubMAC'] }}"
      - p_storage:   "{{ hostvars[item]['h_rhcosDEV'] | default ('sda')  }}"
      - p_network:   "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
      - p_bond:      "{{ hostvars[item]['h_rhcosBOND'] | default ('') }}"
      - p_usbdelay:  "{{ hostvars[item]['h_rhcosUSBdelay'] | default ('0') }}"
      - p_bios_img:  "{{ rhcos_assets[workshop_vars.ocp_version]['bios'] }}"
      - p_port:      "{{ matchbox.port }}"
    replace:
      path: /var/tmp/{{ workshop_vars.clustername }}/iso/{{ p_name }}/isolinux/isolinux.cfg
      regexp: '(\s+)append(\s+.*)?$'
      replace: >
          \1append\2 rd.neednet=1 
          usb-storage.delay_use={{p_usbdelay}} 
          ip={{ p_network }} 
          {% if p_bond != "" %}bond={{ p_bond }}{% endif %}
          "coreos.inst=yes" 
          "coreos.inst.insecure=yes" 
          "coreos.inst.install_dev={{ p_storage }}" 
          "coreos.inst.ignition_url=http://{{ f_bastionIP }}:{{ p_port }}/ignition?mac={{ p_mac }}"
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

  - name: "ocp4-workshop : bastion-iso : customize grub configs"
    vars:
      - p_name:      "{{ hostvars[item]['inventory_hostname_short']}}"
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_mac:       "{{ hostvars[item]['h_pubMAC'] }}"
      - p_storage:   "{{ hostvars[item]['h_rhcosDEV'] | default ('sda')  }}"
      - p_network:   "{{ hostvars[item]['h_rhcosNIC'] | default ('dhcp') }}"
      - p_bond:      "{{ hostvars[item]['h_rhcosBOND'] | default ('') }}"
      - p_usbdelay:  "{{ hostvars[item]['h_rhcosUSBdelay'] | default ('0') }}"
      - p_bios_img:  "{{ rhcos_assets[workshop_vars.ocp_version]['bios'] }}"
      - p_port:      "{{ matchbox.port }}"
    replace:
      path: /var/tmp/{{ workshop_vars.clustername }}/iso/{{ p_name }}/EFI/redhat/grub.cfg
      regexp: '(\s+)linux(\s+.*)?$'
      replace: >
          \1linux\2 rd.neednet=1 
          usb-storage.delay_use={{p_usbdelay}} 
          ip={{ p_network }} 
          {% if p_bond != "" %}bond={{ p_bond }}{% endif %}
          "coreos.inst=yes" 
          "coreos.inst.insecure=yes" 
          "coreos.inst.install_dev={{ p_storage }}" 
          "coreos.inst.ignition_url=http://{{ f_bastionIP }}:{{ p_port }}/ignition?mac={{ p_mac }}"
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

  - name: "ocp4-workshop : bastion-iso : preserve ISO volume id"
    vars:
      t_isofile: "/var/lib/matchbox/assets/{{ rhcos_assets[workshop_vars.ocp_version]['iso'] }}"
    shell:
      cmd: |
        isoinfo -d -i {{ t_isofile }} | grep 'Volume id:' | sed -e 's/Volume id: //g'
    register: isoinfo

  - name: "ocp4-workshop : bastion-iso : for each host generate custom iso image"
    vars:
      - p_name:      "{{ hostvars[item]['inventory_hostname_short'] }}"
      - p_addr:      "{{ hostvars[item]['h_pubIP'] }}"
      - p_mac:       "{{ hostvars[item]['h_pubMAC'] }}"
      - p_volumeid:  "{{ isoinfo.stdout }}"
    shell:
      cmd: |
        cd /var/tmp/{{ workshop_vars.clustername }}/iso/{{ item }}
        genisoimage -U -r -v -T -J -joliet-long        \
                    -V      "{{ p_volumeid }}"         \
                    -volset "{{ p_volumeid }}"         \
                    -A      "{{ p_volumeid }}"         \
                    -b      isolinux/isolinux.bin      \
                    -c      isolinux/boot.cat          \
                    -no-emul-boot                      \
                    -boot-load-size 4                  \
                    -boot-info-table                   \
                    -eltorito-alt-boot                 \
                    -e images/efiboot.img              \
                    -no-emul-boot                      \
                    -o /var/lib/matchbox/assets/{{ workshop_vars.clustername }}-{{ p_name }}.iso . 

    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

  - name: "ocp4-workshop : bastion-iso : update iso file permissions"
    vars:
      - p_name:      "{{ hostvars[item]['inventory_hostname_short'] }}"
    file: 
      path: /var/lib/matchbox/assets/{{ workshop_vars.clustername }}-{{ p_name }}.iso
      mode: "0644" 
      owner: matchbox
      group: matchbox
      state: file 
    loop: "{{ groups['myBootstrap'] + groups['myMasters']  + groups['myWorkers'] }}"

#  - name: "ocp4-workshop : bastion-iso : clean-up iso directory /var/tmp/{{ workshop_vars.clustername }}/iso"
#    shell:
#      cmd: |
#        if [[ -d "/var/tmp/{{ workshop_vars.clustername }}/iso" ]] ; then rm -rf /var/tmp/{{ workshop_vars.clustername }}/iso ; fi

