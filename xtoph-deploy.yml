##
##    Using Ansbile tags are horrible when coupled with
##    import_playbooks.  Thus, we use a variable called
##    'xtoph_deploy_cmd' to determine what to execute.
##    This variable should usually be passed from the 
##    commandline.
##    
##        -e xtoph_deploy_cmd="[deploy | undeploy | redeploy | setup]"
##
##



##
##    First, need to set up the deployhost with
##    needed software, services and settings
##



- hosts: myDeployhost
  tasks:

    - debug: msg="**** BEGIN SETUP  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "setup"
      when: xtoph_deploy_cmd == "setup" or
            xtoph_deploy_cmd == "setup+"

    - debug: msg="**** END SETUP  ****"




##
##    Second, for libvirt based platform hosts 
##    we need to install software, services and settings
##    on the remote hosts (not on the deploy host)
##



- hosts: myLibvirtHosts
  tasks:

    - debug: msg="**** BEGIN SETUP LIBVIRT ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "setup-libvirt"
      when: xtoph_deploy_cmd == "setup" or
            xtoph_deploy_cmd == "setup+"

    - debug: msg="**** END SETUP LIBVIRT ****"



##
##    
##
##     NOTE: hosts may (or may not) exist, 
##           majority of tasks run as 'delegate_to'
##           and so we don't gather_facts
##



- hosts: myWorkers,!myShelter
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN PREUNINSTALL ****"

    - include_role: 
        name: xtoph_ocp4
      vars: 
        xtoph_ocp4_action: "preuninstall-node-shutdown"
      when: xtoph_deploy_cmd == "undeploy" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END PREUNINSTALL ****"

- hosts: myMasters,!myShelter
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN PREUNINSTALL ****"

    - include_role: 
        name: xtoph_ocp4
      vars: 
        xtoph_ocp4_action: "preuninstall-node-shutdown"
      when: xtoph_deploy_cmd == "undeploy" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END PREUNINSTALL ****"

- hosts: myBootstrap,!myShelter
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN PREUNINSTALL ****"

    - include_role: 
        name: xtoph_ocp4
      vars: 
        xtoph_ocp4_action: "preuninstall-node-shutdown"
      when: xtoph_deploy_cmd == "undeploy" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END PREUNINSTALL ****"

- hosts: myBastion,!myShelter
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN PREUNINSTALL ****"

    - include_role: 
        name: xtoph_ocp4
      vars: 
        xtoph_ocp4_action: "preuninstall-node-shutdown"
      when: xtoph_deploy_cmd == "undeploy" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END PREUNINSTALL ****"


- hosts: myBastion,myBootstrap,myWorkers,myMasters,!myShelter
  gather_facts: no
  tasks:

    - debug: msg="**** BEGIN UNDEPLOY ****"

    - include_role:
        name: xtoph_deploy
      vars:
        xtoph_deploy_action: "undeploy"
      when: xtoph_deploy_cmd == "undeploy" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END UNDEPLOY ****"


##
##     Before we start deploying systems, we
##     need to ensure certain basics are configured.
##     Run the 'deploy_preprocess' to:
##       - generate MAC addresses if needed
##       - add DNS entries to /etc/hosts
##       - maybe more stuff, go look!
##



- hosts: myBastion,myBootstrap,myWorkers,myMasters
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN PREPROCESS  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "preprocess"
      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END PREPROCESS  ****"



##
##     For the xtoph_ocp4, there are 
##     concurrency considerations.  We need to 
##     deploy systems in specific order:
##
##       1) bastion
##       2) bootstrap
##       3) masters
##       4) workers
##
##     NOTE: 'serial: #' limits concurrent 
##           deployments and resolves problems
##           related to disk space and i/o
##           limits
##



- hosts: myBastion
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN myBastion  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "deploy"
      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END myBastion  ****"



##
##    Bastion host should be deployed,
##    proceed with bastion configuration
##
##    NOTE:    at the completion of this
##             step, the workshop playbook 'locks' the
##             state of the configs on the bastion
##             to prevent successive attempts
##             to deploy from creating new certs.
##
##    NOTE:    we DO need to gather_facts
##



- hosts: myBastion,myBootstrap,myMasters,myWorkers
  gather_facts: no 
  tasks:

    - include_role: 
        name: xtoph_ocp4
      vars: 
        xtoph_ocp4_action: "config-bastion"
      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"



##
##    Bootstrap
##



- hosts: myBootstrap
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN myBootstrap  ****"

    - block:
          - include_role: 
              name: xtoph_ocp4
            vars: 
              xtoph_ocp4_action: "preinstall-node"
#              xtoph_ocp4_action: "preinstall-bastion"

          - include_role: 
              name: xtoph_deploy
            vars: 
              xtoph_deploy_action: "deploy"

          - include_role:
              name: xtoph_ocp4
            vars:
              xtoph_ocp4_action: "postinstall-node"

      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END myBootstrap  ****"



##
##    Masters   
##    



- hosts: myMasters
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN myMasters  ****"

    - block:
          - include_role: 
              name: xtoph_ocp4
            vars: 
              xtoph_ocp4_action: "preinstall-node"
#              xtoph_ocp4_action: "preinstall-masters"
      
          - include_role: 
              name: xtoph_deploy
            vars: 
              xtoph_deploy_action: "deploy"
      
          - include_role:
              name: xtoph_ocp4
            vars:
              xtoph_ocp4_action: "postinstall-node"

      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END myMasters  ****"

      

##
##    Workers
##    



- hosts: myWorkers
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN myWorkers  ****"

    - block:
          - include_role: 
              name: xtoph_ocp4
            vars: 
              xtoph_ocp4_action: "preinstall-node"
#              xtoph_ocp4_action: "preinstall-workers"
      
          - include_role: 
              name: xtoph_deploy
            vars: 
              xtoph_deploy_action: "deploy"
      
          - include_role:
              name: xtoph_ocp4
            vars:
              xtoph_ocp4_action: "postinstall-node"

      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END myWorkers  ****"



## 
##    Finish OCP Deployment
##



- hosts: myMasters,myWorkers
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN Cluster Post-Install  ****"

    - include_role:
        name: xtoph_ocp4
      vars:
        xtoph_ocp4_action: "postinstall-cluster"
      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END Cluster Post-Install  ****"


