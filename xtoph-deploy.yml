##
##    Using Ansbile tags are horrible when coupled with
##    import_playbooks.  Thus, we use a variable called
##    'xtoph_deploy_cmd' to determine what to execute.
##    This variable should useually be passed from the 
##    commandline.
##    
##        -e xtoph_deploy_cmd="[deploy | undeploy | redeploy | setup]"
##
##

##
##    First, need to set up the deployhost with
##    needed software, services and settings
##



- hosts: myDeployhost
  tasks:

    - debug: msg="**** BEGIN SETUP  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "setup"
      when: xtoph_deploy_cmd == "setup" or
            xtoph_deploy_cmd == "setup+"

    - debug: msg="**** END SETUP  ****"



##
##    
##
##     NOTE: hosts may (or may not) exist, 
##           majority of tasks run as 'delegate_to'
##           and so we don't gather_facts
##



- hosts: myBastion,myBootstrap,myWorkers,myMasters,!myShelter
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN UNDEPLOY  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "undeploy"
      when: xtoph_deploy_cmd == "undeploy" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END UNDEPLOY  ****"


##
##     Before we start deploying systems, we
##     need to ensure certain basics are configured.
##     Run the 'deploy_preprocess' to:
##       - generate MAC addresses if needed
##       - add DNS entries to /etc/hosts
##       - maybe more stuff, go look!
##



- hosts: myBastion,myWorkers,myMasters,myBootstrap
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN PREPROCESS  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "preprocess"
      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END PREPROCESS  ****"


##
##     For the OCP4  Workshop, there are 
##     concurrency considerations.  We need to 
##     deploy systems in specific order:
##
##       1) bastion
##       2) bootstrap
##       3) masters
##       4) workers
##
##     NOTE: 'serial: #' limits concurrent 
##           deployments and resolves problems
##           related to disk space and i/o
##           limits
##



- hosts: myBastion
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN myBastion  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "deploy"
      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END myBastion  ****"



##
##    Bastion host should be deployed,
##    proceed with bastion configuration
##
##    NOTE: that at the completion of this
##          step, the workshop playbook 'locks' the
##          state of the configs on the bastion
##          to prevent successive attempts
##          to deploy from creating new certs.
##



- import_playbook: playbooks/deployer-configure-bastion.yml
  when: xtoph_deploy_cmd == "deploy" or
        xtoph_deploy_cmd == "setup+" or
        xtoph_deploy_cmd == "redeploy" 



##
##    Bootstrap
##



- import_playbook: playbooks/deployer-preinstall-bootstrap.yml
  when: xtoph_deploy_cmd == "deploy" or
        xtoph_deploy_cmd == "setup+" or
        xtoph_deploy_cmd == "redeploy"

- hosts: myBootstrap
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN myBootstrap  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "deploy"
      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END myBootstrap  ****"



##
##    Masters   
##    



- import_playbook: playbooks/deployer-preinstall-masters.yml
  when: xtoph_deploy_cmd == "deploy" or 
        xtoph_deploy_cmd == "setup+" or 
        xtoph_deploy_cmd == "redeploy"



- hosts: myMasters
  gather_facts: no 
  tasks:

    - debug: msg="**** START myMasters  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "deploy"
      when: xtoph_deploy_cmd == "deploy" or 
            xtoph_deploy_cmd == "setup+" or 
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END myMasters  ****"


##
##    Workers
##    



- import_playbook: playbooks/deployer-preinstall-workers.yml
  when: xtoph_deploy_cmd == "deploy" or
        xtoph_deploy_cmd == "setup+" or
        xtoph_deploy_cmd == "redeploy"



- hosts: myWorkers
  gather_facts: no 
  tasks:

    - debug: msg="**** BEGIN myWorkers  ****"

    - include_role: 
        name: xtoph_deploy
      vars: 
        xtoph_deploy_action: "deploy"
      when: xtoph_deploy_cmd == "deploy" or
            xtoph_deploy_cmd == "setup+" or
            xtoph_deploy_cmd == "redeploy"

    - debug: msg="**** END myWorkers  ****"


## 
##    Finish OCP Deployment
##



- import_playbook: playbooks/bastion-openshift-finish.yml
  when: xtoph_deploy_cmd == "deploy" or
        xtoph_deploy_cmd == "setup+" or
        xtoph_deploy_cmd == "redeploy"



##
##    Bootstrap server has servered it's purpose.
##    We can delete it.   
##
##    NOTE: I am leaving this step included BUT commented
##          out.  Deleting a host that's part of a cluster
##          affects the sanity of running "deploy" multiple
##          times on an existing cluster.  
##
##          So if you DO NOT plan to run "deploy" again,
##          it's safe to automate the removal of the bootstrap
##



#- hosts: myBootstrap
#  gather_facts: no 
#  tasks:
#
#    - debug: msg="**** BEGIN RECLAIM myBootstrap ****"
#
#    - include_role: 
#        name: xtoph_deploy
#      vars: 
#        xtoph_deploy_action: "undeploy"
#      when: xtoph_deploy_cmd == "deploy" or
#            xtoph_deploy_cmd == "setup+" or
#            xtoph_deploy_cmd == "redeploy"
#
#    - debug: msg="**** BEGIN RECLAIM myBootstrap ****"
